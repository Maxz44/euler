#!/usr/bin/env python3

# --- Euler pb 1

# Multiples of 3 and 5
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
# The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.


def euler1(n):
    return sum([x for x in range(1, n) if x % 3 == 0 or x % 5 == 0])


# euler1(1000)

# --- Euler pb 2

# Even Fibonacci numbers

# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.


def fib(n):
    if (n > 3):
        fib = [1, 1]
        i = 0
        for i in range(n - 2):
            fib.append(fib[i] + fib[i+1])
        return fib
    else:
        if n > 0:
            return 1
        else:
            print('chose an integer value')


def euler2(n):
    fib = [1, 2]
    i = 0
    while fib[-1] < n:
        fib.append(fib[i] + fib[i+1])
        i += 1
    return sum([x for x in fib if x % 2 == 0])


# print(euler2(4000000))

# --- Euler pb 3

# Largest prime factor

# The prime factors of 13195 are 5, 7, 13 and 29.
# 
# What is the largest prime factor of the number 600851475143 ?


def isprime(n):
    hasfactor = n % 2 == 0
    i = 2
    from math import sqrt
    while not hasfactor and i <= int(sqrt(n)):
        i += 1
        hasfactor = n % i == 0
    return not hasfactor


def euler3(n):
    lastfact = 1
    from math import sqrt
    for i in range(3, int(sqrt(n))):
        if n % i == 0 and isprime(i):
            lastfact = i
    return lastfact


# print(euler3(600851475143))

# --- Euler pb 4

# A palindromic number reads the same both ways. The largest palindrome made
# from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
# Find the largest palindrome made from the product of two 3-digit numbers.

def nb_is_palindrom(n):
    return str(n) == str(n)[::-1]

def euler4(n):
    rslt = set()
    for i in range(10**(n-1), 10**n):
        for j in range(10**(n-1), 10**n):
            rslt.add(i*j)
    rslt = [x for x in rslt if nb_is_palindrom(x)]
    return max(rslt)

# print(euler4(3))


# --- Euler pb 5

# Smallest multiple

# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

def is_divisible_range(n, start, end):
    rslt = True
    for i in range(start, end+1):
        rslt = rslt and n % i == 0
    return rslt


def euler5(start, end):
    found = False
    i = end + 1
    while not found:
        i += 1
        found = is_divisible_range(i, start, end)
    return i

# print(euler5(1, 20))

# --- Euler 6

# Sum square difference

# The sum of the squares of the first ten natural numbers is,
#   1**2 + 2**2 + ... + 10**2 = 385
# The square of the sum of the first ten natural numbers is,
#   (1 + 2 + ... + 10)**2 = 55**2 = 3025
# Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is
#   3025 - 385 = 2640
# Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

def euler6(n):
    a = sum([x**2 for x in range(1, n+1)])
    b = sum(range(1, n+1))**2
    return b - a

# print(euler6(100))

# --- Euler 7

# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
# What is the 10 001st prime number?

def euler7(n):
    # nb to test as prime
    x = 2
    # nb of prime nb found
    prime_n = 1
    while prime_n < n:
        x += 1
        if isprime(x):
            prime_n += 1
    return x

# print(euler7(10_001))


# --- Euler 8
# https://projecteuler.net/problem=8

def euler8(n):
    nb_series = ''.join((
        "73167176531330624919225119674426574742355349194934",
        "96983520312774506326239578318016984801869478851843",
        "85861560789112949495459501737958331952853208805511",
        "12540698747158523863050715693290963295227443043557",
        "66896648950445244523161731856403098711121722383113",
        "62229893423380308135336276614282806444486645238749",
        "30358907296290491560440772390713810515859307960866",
        "70172427121883998797908792274921901699720888093776",
        "65727333001053367881220235421809751254540594752243",
        "52584907711670556013604839586446706324415722155397",
        "53697817977846174064955149290862569321978468622482",
        "83972241375657056057490261407972968652414535100474",
        "82166370484403199890008895243450658541227588666881",
        "16427171479924442928230863465674813919123162824586",
        "17866458359124566529476545682848912883142607690042",
        "24219022671055626321111109370544217506941658960408",
        "07198403850962455444362981230987879927244284909188",
        "84580156166097919133875499200524063689912560717606",
        "05886116467109405077541002256983155200055935729725",
        "71636269561882670428252483600823257530420752963450",
    ))
    max_prod = (0, '')
    for i, char in enumerate(nb_series):
        # Look n ahead if we have enougth char left
        if i + n <= len(nb_series):
            prod = int(char)
            mystring = char
            for j in range(1, n):
                mystring += nb_series[i + j]
                prod = prod * int(nb_series[i + j])
            if prod > max_prod[0]:
                max_prod = prod, mystring
    return max_prod[0]


# print(euler8(13))